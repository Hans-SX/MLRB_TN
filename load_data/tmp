"""
Test for cliffor_sequence_with_noise
"""
# %%
import numpy as np
from RB_numerical_toy_model_v1 import noise_model
from RB_numerical_toy_model_v1 import clifford_sequence_with_noise
from RB_numerical_toy_model_v1 import gen_randH
from utils_tn import single_cliffords
from random import randint
import matplotlib.pyplot as plt

noise_mode = 'randH'
randH = gen_randH(0)
noise_para = 0.1

seed = 5
# np.random.seed(seed)

ket_0 = np.array([1,0]).reshape(2,1) + 1j*np.zeros((2,1))
ket_1 = np.array([0,1]).reshape(2,1) + 1j*np.zeros((2,1))
rho = np.array([[1,0],[0,0]]) + 1j*np.zeros((2,2))
proj_O = np.kron(ket_0, ket_0.T)

M = 100
sample_size = int(50)
fm = np.zeros((sample_size, M), dtype=complex)

clifford_list = single_cliffords()
sam_clif = np.zeros((sample_size, M, 2, 2), dtype=complex)
for sam in range(sample_size):
    for i in range(M):
        sam_clif[sam, i] = clifford_list[randint(0,23)]

for i in range(sample_size):
    for m in range(M):
        final_state, _ = clifford_sequence_with_noise(rho, sam_clif[i, :m+1], noise_mode, noise_para, seed, randH)
        fm[i, m] = np.trace(proj_O @ final_state)

F = np.mean(fm, axis=0)
std = np.std(fm, axis=0)/np.sqrt(sample_size)
plt.errorbar(range(1, M+1), F, yerr=std)
#%%
"""
don't remember, test something
"""
e_edgs = edges_in_lamdas(lamdas, m)
s_edgs = edges_btw_ctr_nois(control_2, lamdas, m)

tmp_F2 = contract_by_nodes(lamdas+control_2).tensor

for n in range(1,m):
    noise_tmp = list(map(lambda x: order4_to_2(lamdas[x].tensor, sys_dim, bond_dim), np.arange(m-n,m+2)))
    noise_tmp.reverse()
    lam_n = initialized_lamdas_tn(n, noise_tmp, rho_e, sys_dim, bond_dim)
    lam_n_edg = edges_in_lamdas(lam_n, n)
    ctr_n_edg = edges_btw_ctr_nois(sam_n[sam][n-1], lam_n, n)
    tmp_n = tn.contractors.auto(lam_n+sam_n[sam][n-1], None, ignore_edge_order=True)
    tmp_Fn[sam, n-1] = np.abs(tmp_n.tensor)


control_2 = []
for i in range(len(control_ten[0])):
    control_2.append(control_ten[0][i].tensor)
    control_2[i].add_axis_names(control_ten[0][i].axis_names)